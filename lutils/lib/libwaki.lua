--[[
  Библиотека операций с русскими кодировками
--]]

-- u=Unicode, w=win-1251, k=КОИ8, a=CP866, i=ISO8859-5
local base_codetable = {
  -- буквы
  { w=0xE0, k=0xC1, a=0xa0, i=0xD0 }, -- а
  { w=0xE1, k=0xC2, a=0xa1, i=0xD1 }, -- б
  { w=0xE2, k=0xD7, a=0xa2, i=0xD2 }, -- в
  { w=0xE3, k=0xC7, a=0xa3, i=0xD3 }, -- г
  { w=0xE4, k=0xC4, a=0xa4, i=0xD4 }, -- д
  { w=0xE5, k=0xC5, a=0xa5, i=0xD5 }, -- е
  { w=0xE6, k=0xD6, a=0xa6, i=0xD6 }, -- ж
  { w=0xE7, k=0xDA, a=0xa7, i=0xD7 }, -- з
  { w=0xE8, k=0xC9, a=0xa8, i=0xD8 }, -- и
  { w=0xE9, k=0xCA, a=0xa9, i=0xD9 }, -- й
  { w=0xEA, k=0xCB, a=0xaa, i=0xDA }, -- к
  { w=0xEB, k=0xCC, a=0xab, i=0xDB }, -- л
  { w=0xEC, k=0xCD, a=0xac, i=0xDC }, -- м
  { w=0xED, k=0xCE, a=0xad, i=0xDD }, -- н
  { w=0xEE, k=0xCF, a=0xae, i=0xDE }, -- о
  { w=0xEF, k=0xD0, a=0xaf, i=0xDF }, -- п
  { w=0xF0, k=0xD2, a=0xe0, i=0xE0 }, -- р
  { w=0xF1, k=0xD3, a=0xe1, i=0xE1 }, -- с
  { w=0xF2, k=0xD4, a=0xe2, i=0xE2 }, -- т
  { w=0xF3, k=0xD5, a=0xe3, i=0xE3 }, -- у
  { w=0xF4, k=0xC6, a=0xe4, i=0xE4 }, -- ф
  { w=0xF5, k=0xC8, a=0xe5, i=0xE5 }, -- х
  { w=0xF6, k=0xC3, a=0xe6, i=0xE6 }, -- ц
  { w=0xF7, k=0xDE, a=0xe7, i=0xE7 }, -- ч
  { w=0xF8, k=0xDB, a=0xe8, i=0xE8 }, -- ш
  { w=0xF9, k=0xDD, a=0xe9, i=0xE9 }, -- щ
  { w=0xFA, k=0xDF, a=0xea, i=0xEA }, -- ъ
  { w=0xFB, k=0xD9, a=0xeb, i=0xEB }, -- ы
  { w=0xFC, k=0xD8, a=0xec, i=0xEC }, -- ь
  { w=0xFD, k=0xDC, a=0xed, i=0xED }, -- э
  { w=0xFE, k=0xC0, a=0xee, i=0xEE }, -- ю
  { w=0xFF, k=0xD1, a=0xef, i=0xEF }, -- я
  { w=0xB8, k=0xA3, a=0xf1, i=0xF1 }, -- ё
  { w=0xA8, k=0xB3, a=0xf0, i=0xA1 }, -- Ё
  { w=0xC0, k=0xE1, a=0x80, i=0xB0 }, -- А
  { w=0xC1, k=0xE2, a=0x81, i=0xB1 }, -- Б
  { w=0xC2, k=0xF7, a=0x82, i=0xB2 }, -- В
  { w=0xC3, k=0xE7, a=0x83, i=0xB3 }, -- Г
  { w=0xC4, k=0xE4, a=0x84, i=0xB4 }, -- Д
  { w=0xC5, k=0xE5, a=0x85, i=0xB5 }, -- Е
  { w=0xC6, k=0xF6, a=0x86, i=0xB6 }, -- Ж
  { w=0xC7, k=0xFA, a=0x87, i=0xB7 }, -- З
  { w=0xC8, k=0xE9, a=0x88, i=0xB8 }, -- И
  { w=0xC9, k=0xEA, a=0x89, i=0xB9 }, -- Й
  { w=0xCA, k=0xEB, a=0x8a, i=0xBA }, -- К
  { w=0xCB, k=0xEC, a=0x8b, i=0xBB }, -- Л
  { w=0xCC, k=0xED, a=0x8c, i=0xBC }, -- М
  { w=0xCD, k=0xEE, a=0x8d, i=0xBD }, -- Н
  { w=0xCE, k=0xEF, a=0x8e, i=0xBE }, -- О
  { w=0xCF, k=0xF0, a=0x8f, i=0xBF }, -- П
  { w=0xD0, k=0xF2, a=0x90, i=0xC0 }, -- Р
  { w=0xD1, k=0xF3, a=0x91, i=0xC1 }, -- С
  { w=0xD2, k=0xF4, a=0x92, i=0xC2 }, -- Т
  { w=0xD3, k=0xF5, a=0x93, i=0xC3 }, -- У
  { w=0xD4, k=0xE6, a=0x94, i=0xC4 }, -- Ф
  { w=0xD5, k=0xE8, a=0x95, i=0xC5 }, -- Х
  { w=0xD6, k=0xE3, a=0x96, i=0xC6 }, -- Ц
  { w=0xD7, k=0xFE, a=0x97, i=0xC7 }, -- Ч
  { w=0xD8, k=0xFB, a=0x98, i=0xC8 }, -- Ш
  { w=0xD9, k=0xFD, a=0x99, i=0xC9 }, -- Щ
  { w=0xDA, k=0xFF, a=0x9a, i=0xCA }, -- Ъ
  { w=0xDB, k=0xF9, a=0x9b, i=0xCB }, -- Ы
  { w=0xDC, k=0xF8, a=0x9c, i=0xCC }, -- Ь
  { w=0xDD, k=0xFC, a=0x9d, i=0xCD }, -- Э
  { w=0xDE, k=0xE0, a=0x9e, i=0xCE }, -- Ю
  { w=0xDF, k=0xF1, a=0x9f, i=0xCF }, -- Я

  -- псевдографика
  { k=0x80, a=0xc4 },  { k=0x81, a=0xb3 },  { k=0x82, a=0xda },  { k=0x83, a=0xbf },
  { k=0x84, a=0xc0 },  { k=0x85, a=0xd9 },  { k=0x86, a=0xc3 },  { k=0x87, a=0xb4 },
  { k=0x88, a=0xc2 },  { k=0x89, a=0xc1 },  { k=0x8A, a=0xc5 },  { k=0xA0, a=0xcd },
  { k=0xA1, a=0xba },  { k=0xA2, a=0xd5 },  { k=0xA4, a=0xd6 },  { k=0xA5, a=0xc9 },
  { k=0xA6, a=0xb8 },  { k=0xA7, a=0xb7 },  { k=0xA8, a=0xbb },  { k=0xA9, a=0xd4 },
  { k=0xAA, a=0xd3 },  { k=0xAB, a=0xc8 },  { k=0xAC, a=0xbe },  { k=0xAD, a=0xbd },
  { k=0xAE, a=0xbc },  { k=0xAF, a=0xc6 },  { k=0xB0, a=0xc7 },  { k=0xB1, a=0xcc },
  { k=0xB2, a=0xb5 },  { k=0xB4, a=0xb6 },  { k=0xB5, a=0xb9 },  { k=0xB6, a=0xd1 },
  { k=0xB7, a=0xd2 },  { k=0xB8, a=0xcb },  { k=0xB9, a=0xcf },  { k=0xBA, a=0xd0 },
  { k=0xBB, a=0xca },  { k=0xBC, a=0xd8 },  { k=0xBD, a=0xd7 },  { k=0xBE, a=0xce },
  { k=0x8B, a=0xdf },  { k=0x8C, a=0xdc },  { k=0x8D, a=0xdb },  { k=0x8E, a=0xdd },
  { k=0x8F, a=0xde },  { k=0x90, a=0xb0 },  { k=0x91, a=0xb1 },  { k=0x92, a=0xb2 },
  { k=0x94, a=0xfe },

  -- разные значки
  { w=0xAA,         a=0xF2, i=0xA4 },  -- знак евро
  { w=0xB9,         a=0xFC, i=0xF0 },  -- номер
  { w=0xA7,                 i=0xFD },  -- параграф
  { w=0xB0, k=0x9C, a=0xF8         },  -- знак градуса
  { w=0x95, k=0x95, a=0xF9         },  -- жирная точка
  { w=0xB7, k=0x9E, a=0xFA         },  -- точка в центре
  {         k=0x96, a=0xFB         },  -- корень
  { w=0xA9, k=0xBF,                },  -- (c)
}

local function mk_recodetbl( src, dst )
  local res = {}
  for _, t in ipairs(base_codetable) do
    if t[src] then
      res[t[src]] = t[dst]
    end
  end
  return res
end

local recodetbl = {}
for _, cp1 in ipairs{'w', 'k', 'a', 'i'} do
  for _, cp2 in ipairs{'w', 'k', 'a', 'i'} do
    if cp1 ~= cp2 then
      recodetbl[cp1..cp2] = mk_recodetbl(cp1, cp2)
    end
  end
end

local fuzzy_codetable = {
  { conv = { "wk", "wa", "wi" }, from = 0x91, to = 0xe0 }, -- левая одинарная кавычка
  { conv = { "wk", "wa", "wi" }, from = 0x92, to = 0xa7 }, -- правая одинарная кавычка
  { conv = { "wk", "wa", "wi" }, from = 0x93, to = 0x22 }, -- левые двойные кавычки
  { conv = { "wk", "wa", "wi" }, from = 0x94, to = 0x22 }, -- правые двойные кавычки
  { conv = { "wk", "wa", "wi" }, from = 0x82, to = 0xa7 }, -- нижняя одинарная кавычка
  { conv = { "wk", "wa", "wi" }, from = 0x84, to = 0x22 }, -- нижняя двойные кавычки
  { conv = { "wk", "wa", "wi" }, from = 0x8b, to = 0x22 }, -- левая одинарная угловая кавычка
  { conv = { "wk", "wa", "wi" }, from = 0x9b, to = 0x22 }, -- правая одинарная угловая кавычка
  { conv = { "wk", "wa", "wi" }, from = 0xab, to = 0x22 }, -- левые двойные угловые кавычки
  { conv = { "wk", "wa", "wi" }, from = 0xbb, to = 0x22 }, -- правые двойные угловые кавычки
  { conv = { "wk", "wa", "wi" }, from = 0x96, to = 0x2d }, -- длинное тире (en dash)
  { conv = { "wk", "wa", "wi" }, from = 0x97, to = 0x2d }, -- длинное тире (em dash)

  { conv = { "kw", "ka", "ki" }, from = 0x9F, to = 0x2f }, -- знак деления
  { conv = { "kw", "ka", "ki" }, from = 0x97, to = 0x3d }, -- приближенное равенство
  { conv = { "kw", "ka", "ki" }, from = 0x98, to = 0x3c }, -- <=
  { conv = { "kw", "ka", "ki" }, from = 0x99, to = 0x3e }, -- >=

  { conv = { "wa", "wi" }, from = 0xA9, to = 0x63 }, -- (c)
  { conv = { "ka", "ki" }, from = 0xBF, to = 0x63 }, -- (c)

  { conv = { "wa", "wk", "wi" }, from = 0xA0, to = 0x20 }, -- неразрывный пробел
  { conv = { "kw", "ka", "ki" }, from = 0x9A, to = 0x20 }, -- неразрывный пробел
  { conv = { "aw", "ak", "ai" }, from = 0xFF, to = 0x20 }, -- неразрывный пробел
  { conv = { "iw", "ik", "ia" }, from = 0xFF, to = 0x20 }, -- неразрывный пробел
}

for _, t in ipairs(fuzzy_codetable) do
  local a, b = t.from, t.to
  for _, cp in ipairs(t.conv) do
    recodetbl[cp][a] = b
  end
end

local signs = { ['w']=0xa2, ['k']=0x9d, ['a']=0xf7, ['i']=0xfe }

local function recodechar( tbl, ch, sign )
  local code1 = string.byte(ch)
  if code1 <= 0x7f then return ch end
  local code2 = tbl[code1]
  return string.char(code2 or sign)
end

--

local function recode( s, coding )
  if coding:sub(1,1) == coding:sub(2,2) then
    return s
  end
  local tbl = recodetbl[coding:sub(1,2)]
  local sign = signs[coding:sub(2,2)]
  return (s:gsub('.', function( c ) return recodechar(tbl, c, sign) end))
end

local function shift( s, codepage, ac, bc, sh )
  local cp = codepage:sub(1,1)
  return (s:gsub('.', function( c )
           if string.byte(c) < 128 then
             return c:lower()
           else
             local wc = recode(c, cp..'w')
             local wci = wc:byte()
             if ac <= wci and wci <= bc then
               return recode(string.char(wci + sh), 'w'..cp);
             else
               return ch;
             end
           end
         end))
end

local function lower( s, codepage )
  return shift(s, codepage or 'win', 192, 223, 32)
end

local function upper( s, codepage )
  return shift(s, codepage or 'win', 224, 255, -32)
end

waki = {
  recode = recode,
  lower = lower,
  upper = upper,
}

return waki
