.title "Форматтер гипертекста luaht"

.sect "Введение"

Форматтер ~~~luaht~~~ написан на языке ~~~Lua~~~ и предназначен для преобразования
текста, содержащего простые команды форматирования в гипертекстовые документы
формата ~~~html~~~.
Конвертер преследует две цели.
Основная цель --- получить возможность комфортно набирать ~~~html~~~-документы
в обычном текстовом редакторе.
Вторая цель --- получить средство автоматического формирования
перекрестных ссылок в массиве взаимосвязанных ~~~html~~~-документов.

.sect "Обработка входного файла"

Входной текстовый файл обрабатывается построчно.
При этом в каждой строке пропускаются лидирующие пробелы.
В дальнейшем, говоря <<<строки, начинающиеся с символа ...>>>
мы всюду имеем в виду <<<строки, в которых первый непробельный символ есть ...>>>.

Строки, начинающиеся с символа ~~~'#'~~~ считаются ___комментариями___ и игнорируются.
Если строка начинается с последовательности символов ~~~'#!'~~~,
то она считается ___todo-комментарием___.
Todo-комментарий игнорируется, но во время обработки файла строка,
содержащая такой комментарий, печатается на консоль.
Такой комментарий удобен для отметки мест, в которых необходимо
сделать исправления.

Строки, начинающиеся с символа ~~~'.'~~~ интерпретируются как ___команды___,
которые представляют собой вызовы соответствующих публичных функций
модуля ~~~luaht~~~.
При этом для команд, не предусматривающих аргументов, допускается
опускать пустые круглые скобки.
Также в соответствии с синтаксисом языка ~~~Lua~~~ допускается
опускать скобки при вызове функций, имеющих единственный строковый аргумент.
Команда ~~~'.end'~~~ имеет специальный синоним: ~~~'..'~~~.

Вот пример элементов, которые может включать докумет:

.code
  # это -- строка комментария

  #! это тоже комментарий, но он печатается на консоль при обработке

  # в следующей строке -- команда без аргументов:
  .cmd_name

  # это -- альтернативная форма записи команды без аргументов:
  .cmd_name()

  # это -- вызов команды с одним аргументом:
  .cmd_name "arg"

  # а это -- команда с двумя аргументов (foo и bar):
  .another_cmd_name("foo", "bar")

  # а вот команда завершения:
  ..
..

.sect "Форматирование строк и абзацев"

В каждой строке производится замена некоторых символов на соответствующие им
конструкции языка ~~~html~~~.
Символы ~~~'&'~~~ (амперсанд), ~~~'<'~~~, ~~~'>'~~~ заменяются на соответствующие
команды (~~~'&amp;', '&lt;', '&gt;'~~~) т.е. при наборе текста этими символами
можно пользоваться свободно.

При разборе строки производится обработка специальных
___форматирующих последовательностей символов___,
состоящих из троектатно повторенного специального символа.
Символы выбраны так, чтобы по возможности сделать их набор независимым
от выбранной раскладки клавиатуры и уменьшить вероятность случайного
совпадаения форматирующей последовательности с элементами обычного текста.
Текст, расположенный между парными форматирующими последовательностями
приобретает после обработки заданное специфическое начертание.
Действие форматирующих последовательностей всегда ограничено одной строкой
исходного текста.
Вот список обрабатываемых форматирующих последовательностей:

.code
  ___строка___             курсивное начертание

  ***строка***             полужирное начертание

  ~~~строка~~~             моноширинный шрифт

  ###строка###             зачеркнутый шрифт
..

Также определено несколько непарных последовательностей, имеющих специальный смысл:
.code
  <<<                      открывающаяся кавычка

  >>>                      закрывающаяся кавычка

  ---                      тире
..

Замена последовательностей символов не производится между командой ~~~'code'~~~
и соответствующей командой '..'.

Абзац формируются из последовательных строк, среди которых не может быть
пустых строк.
Одна или несколько пустых строк инициируют начало нового абзаца.
Заголовки также инициируют начало нового абзаца.

.sect "Заголовки"

Поддерживается 4 уровня заголовков, соответствующих тэгам <h1>, <h2>, <h3> и <h4>.
Этим заголовкам соответствуют команды
~~~'title'~~~, ~~~'sect'~~~, ~~~'subs'~~~ и ~~~'para'~~~,
которые делают заголовком всю строку, непосредственно следующую за командой.
Вот пример оформления заголовков:

.code
  .title "Заголовок документа"

    .sect "Заголовок раздела"

      .subs "Заголовок подраздела"

        .para "Заголовок подподраздела"
..

.sect "Списки"

Поддержаны ненумерованные и нумерованные списки и списки определений.
Этим типам списков соответствуют команды ~~~'list'~~~, ~~~'enum'~~~ и ~~~'defl'~~~.
Определение списка завершается командой завершения ~~~'.end'~~~ (или ~~~'..'~~~).
В ненумерованных и нумерованных списках каждый элемент списка должен
начинаться с команды ~~~'.item'~~~, которая не имеет аргументов.
В списках определений каждый элемент списка начинается командой ~~~'def'~~~,
единственный аргумент которой трактуется как определяемый термин.

Вот пример форматирования списков:

.code
  .list
  .item
    первый элемент
  .item
    второй элемент
  .end

  .enum
  .item
    первый элемент
  .item
    второй элемент
  .end

  .defl
  .def "первый термин"
     определение первого термина
  .def "второй термин"
     определение второго термина
  .end
..

.sect "Специальные абзацы"

К специальным абзацам относятся эпиграфы, цитаты, заметки и абзацы выделения.
Все специальные абзацы выделяются цветом фона и отступом от левого
и правого краев.
Для цитат, заметок и абзаце выделения отступы соответствуют стандартным
отступам тэга ~~~blockquote~~~, а эпиграфы имеют большой отступ слева.
Цитаты выделяются курсивом, абзацы выделения --- полужирным шрифтом,
а цитаты --- полужирным курсивом.
Доплоллнительно в аргументах команд ~~~.epi~~~ и ~~~.cite~~~
может быть указан источник.

.code
  .epi
    текст эпиграфа
  .end

  .epi "источник"
    текст эпиграфа с указанием источника
  .end

  .cite
    текст цитаты
  .end

  .cite "источник"
    текст цитаты с указанием источника
  .end

  .note
    текст заметки
  .end

  .sic
    текст выделенного абзаца
  .end
..

.sect "Преформатированный текст"

Преформатированный текст отображается моноширинным шрифтом.
Такой текст должен начинаться с команды ~~~'code'~~~ и заканчиваться командой завершения,
причем должна быть использована команда завершения в форме ~~~'..'~~~ и расположена она
должна быть строго в первой позиции строки.
Внутри преформатированного текста не обрабатываются последовательности символов
и другие команды.
Вот пример:

.code
  .code
    преформатированный текст
  ..
..

.sect "Рисунки"

Различаются рисунки, встраиваемые в текст без дополнительного выравнивания
и рисунки, занимающие всю ширину страницы и отцентрированные на ней.
Встраиваемые рисунки включаются командой ~~~'img'~~~, которая имеет один аргумент ---
имя файла с картинкой:

.code
  .img "filename.jpg"
..

Отцентрированная иллюстрация, занимающая всю ширину страницы включается командой
~~~'fig'~~~, которая имеет также один аргумент (имя файла), но должна завершаться
командой завершения:

.code
  .fig "filename.jpg"
    Подпись к картинке
  .end
..

Между командой ~~~'fig'~~~ и командой завершения может находиться подпись
к иллюстрации, которая также центрируется.

.sect "Ссылки"

Http-ссылка вставляется внутри тройных фигурных скобок:
.code
  см. {{{yandex.ru}}}, где...
  см. {{{yandex.ru}{Яндекс}}}, где...
..
Во втором примере задается текст ссылки.
В тексте такие ссылки будут выглядеть так: 
.list
.item
{{{yandex.ru}}}
.item
{{{yandex.ru}{Яндекс}}}
..
Префикс ~~~'http://'~~~ в обоих случаях добавляется автоматически.

Ссылка на локальный документ вставляется внутри тройных квадратных скобок:
.code
  [[[foo/bar/todo.txt]]]
  см. [[[foo/bar/todo.txt][Todo]]], где...
..
Во втором примере задается текст ссылки.
В тексте такие ссылки будут выглядеть так: 
.list
.item
[[[foo/bar/todo.txt]]]
.item
[[[foo/bar/todo.txt][Todo]]]
..
Здесь обычно используется относительный путь к целевому документу.

.sect "Вставка формул"

Для вставки формул можно использовать один из двух режимов --- inline и outline.
Для вставки inline-формулы она записывается в строке внутри скобок ~~~'$$$'~~~, например:
.code
  Введем функцию $$$f(x) = x^2 +1$$$, которая...
..
Для вставки outline-формулы она записывается между командой ~~~'tex'~~~ и соответствующей
командой завершения:
.code
  Рассмотрим функцию
  .tex
    f(x) = \int_0^x g(s) ds,
  ..
  которая...
..
Так же как и в команде ~~~'code'~~~, команда завершения формулы должна быть записана
в форме ~~~'..'~~~ и расположена она должна быть строго в первой позиции строки.

Для обработки формул ~~~luaht~~~ использует интерпретатор формул ~~~mimeTeX~~~.
