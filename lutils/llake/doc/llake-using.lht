.title "Использование llake"

Типичный конфигурационный файл приложения не определяет весь набор параметров,
требуемых скриптом ~~~llake~~~.
Вместо этого с помощью функции ~~~use_rules()~~~ производится активация т.н. файла правил.

Типичный файл правил определяет функцию ~~~init_rules()~~~, содержащую код,
инициализирующий внутренние струтуры файла правил.
Второй аргумент функции ~~~use_rules()~~~ передается в функцию ~~~init_rules()~~~
и служит для задания параметров файла правил.

.sect "Как устроен mingw.rlu"

Файл ~~~mingw.rlu~~~ --- типичный файл правил, экспортирующий все параметры,
необходимые для сборки приложений компилятором ~~~MinGW~~~.

.subs "Инициализация"

Функция ~~~init_rules~~~ файла ~~~mingw.rlu~~~ осуществляет инициализацию значений
внутренних переменных файла правил.
Эта функция в аргументе получает таблицу параметров ~~~mode~~~, переданную при вызове функции
~~~use_rules()~~~ во втором аргументе.
В первую очередь функция инициализации выводит строку ~~~'mode: mingw'~~~  и вслед за ней
перечисляет через запятую имена всех полей таблицы ~~~mode~~~, 
имеющих либо булевское значение ~~~'true'~~~, либо тип, отличный от булевского.
Для небулевских полей вслед за именем в скобках выводится значение поля.

В таблице ~~~mode~~~ могут присутствовать следующие параметры (в скобках указан тип параметра,
либо слово ~~~variant~~~ для полей, которые могут принимать значения различных типов):
.code
  debug         (boolean) сборка с отладочной информацией
  fastmath      (boolean) сборка в режиме fastmath
  prof          (boolean) сборка для профилирования
  gui           (boolean) сборка gui-приложения
  dll           (boolean) сборка динамической библиотеки
  libs          (string)  строка, содержащая список (через пробел) имен дополнительных библиотек
  wx            (variant) сборка с библиотекой wxWidgets
..

Если параметр ~~~wx~~~ равен ~~~true~~~ или ~~~'dll'~~~, то используется
динамическая версия библиотеки ~~~wx~~~.
Если параметр ~~~wx~~~ равен ~~~'static'~~~, то используется
статическая версия библиотеки ~~~wx~~~.

Из переменной среды с именам ~~~lwdg_home~~~ извлекается путь к базовой директории,
который используется в качестве префикса для пути к директориям ~~~'include'~~~ и ~~~lib~~~.
Эти директории при всех значениях параметров используются при поиске заголовков и библиотек.

Функция инициализации экспортирует следующие глобальные функции:
.code
  mk_cc( dst_fn, src_fn, inc_opt )      компиляция исходника
  mk_ld( dst_fn, obj_lst )              сборка исполнимого файла
  mk_rc( dst_fn, src_fn )               компиляция файла ресурсов
  mk_obj_id( dir, name )                получение имени объектника
..
Функция ~~~mk_obj_id~~~ генерирует базовое имя объектника по директории исходника и
базовому имени объектника.
Остальные функции возвращают командную строку, выполняемую в соответствующем случае.
Во все случаях функциям передаются полные имена файлов.
Параметр ~~~inc_opt~~~ содержит опции включения необходимых заголовочных файлов.
Параметр ~~~obj_lst~~~ содержит список объектников, участвующих в сборке исполнимого файла.

.subs "Параметры, соответствующие раширениям"



.sect "Использование mingw.rlu"
