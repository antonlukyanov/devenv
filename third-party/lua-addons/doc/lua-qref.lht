.title "Lua: Справочное руководство"

.sect "Специальные символы"

.code
  \n     перевод строки (LF = 0x0a)            \a        bell
  \r     возврат каретки (CR = 0x0d)           \b        backspace
  \t     табуляция                             \f        form feed
  \\     символ обратной косой черты           \v        вериткальная табуляция
  \"     кавычка                               \[        левая квадратная скобка 
  \'     апостроф                              \]        правая квадратная скобка
  \ddd   символ с кодом ddd (десятичным)       \0        символ с кодом 0
..

.sect "<<<Syntax sugar>>>"

В следующей таблице перечислены основные синтаксические соглашения,
используемые в ~~~Lua~~~.
В правом столбце приведен фрагмент кода, эквивалентный записи,
приведенной в левом столбце:

.code
  s.f                                        s["f"]
  x = { f = v }                              x = {}; x["f"] = v
  x = { [i] = v }                            x = {}; x[i] = v
  function fn( ... ) ... end                 fn = function( ... ) ... end
  local function fn( ... ) ... end           local fn = function( ... ) ... end
  function x.fn( ... ) ... end               x.fn = function( ... ) ... end
  function x:fn( ... ) ... end               x.fn = function( self, ... ) ... end
  f{...}                                     f({...})
  f'...'                                     f('...')
  f""                                        f("")
  f[[...]]                                   f([[...]])
  x:f(...)                                   x.f(x, ...)
..

.sect "Случаи дополнения списков"

Возвращаемые функцией значения последовательно помещаются в список
в следующих случаях:

.list
.item
  если вызов функции является последним элементом списка инициализаторов таблицы;
.item
  если вызов функции находится в конце списка значений справа от знака присваивания;
.item
  если вызов функции стоит в конце списка фактических параметров при вызове другой функции;
.item
  если вызов функции стоит в конце списка возвращаемых значений в операторе ~~~return~~~;
..

Это поведение можно изменить, заключив вызов функции в круглые скобки.
В этом случае из всех возвращаемых функцией значений используется
только первое.

.sect "Случаи неожиданного поведения"

.list
.item
Идентификаторы, начинающиеся с подчеркивания и состоящие только из
заглавных букв, зарезервированы для внутреннего использования интерпретатором.

.item
Если в конце строки исходного файла стоит символ обратной косой черты,
то на следующей строке может быть продолжено определение строкового литерала,
в который в этом месте вставится символ новой строки.

.item
Если непосредственно после символов ~~~'[['~~~ идет перевод строки, то он
не включается в строковый литерал.

.item
Значение ~~~nil~~~ рассматривается как ~~~false~~~.
Все остальные значения, включая число ~~~0~~~ и пустую строку,
рассматриваются как логическое значение ~~~true~~~.

.item
Строки представляют собой массивы 8-битных символов и могут
содержать внутри себя символ с нулевым кодом.
Все строки в ~~~Lua~~~ константные т.е.
изменить содержимое существующей строки нельзя.

.item
Арифметические операции подразумевают числовые аргументы
и попытка выполнить такую операцию над строками приведет к преобразованию
их в числа.
Строковые операции, производимые над числами, приводят к их
преобразованию в строку с помощью некоторого фиксированного форматного
преобразования.

.item
Переменная считается существующей с момента ее первого использования.
Переменные, которым не было присвоено значение, содержат значение ~~~nil~~~.
Для удаления переменной ей можно просто присвоить значение ~~~nil~~~.

.item
Переменные хранят ссылки на объекты.
При присваивании, передаче в функцию в качестве аргумента и возвращении
из функции в качестве результата не происходит копирование объектов,
копируются только ссылки на них.

.item
При сравнении на равенство не производится преобразование типов.
Объекты разных типов всегда считаются различными.

.item
При выяснении порядка типы аргументов должны совпадать, т.е. числа
сравниваются с числами, а строки --- со строками.
..

.sect "Запуск интерпретатора"

Формат строки запуска:

.code
  lua [options] [script [args]]
..

Основные опции:

.defl
.def "~~~-l file~~~"
   выполнить файл ~~~file~~~ до выполнения скрипта
.def "~~~-i~~~"
   перейти в интерактивный режим после выполнения скрипта
.def "~~~-v~~~"
   вывести номер версии
.def "~~~-h~~~"
   вывести подсказку
..

Перед обработкой командной строки интерпретатор ищет переменную окружения с именем
~~~LUA_INIT~~~.
Если ее значение имеет вид ~~~@filename~~~, то выполняется файл ~~~filename~~~.
Иначе выполняется сама строка.

Аргументы передаются скрипту в виде массива ~~~arg~~~,
содержащем поле ~~~n~~~ (число аргументов).
Аргументы нумеруются с ~~~1~~~, но в позиции ~~~0~~~
расположено имя скрипта.
