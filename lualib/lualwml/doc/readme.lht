.title "lualwml: lwml-расширения стандартной библиотеки Lua"

Здесь описаны расширения стандартной библиотеки Lua,
реализованные в рамках динамической библиотеки ~~~lualwml.dll~~~
и импортируемые из ~~~lwml~~~.

.sect "Загрузка библиоткеи"

Библиотека ~~~lualwml~~~ может быть загружена следующим образом:

.code
  require "lualwml"
..

.sect "Описание функций"

После загрузки библиотеки становятся доступными таблицы ~~~vbmp~~~ и ~~~array~~~.

.subs "Объект ~~~vbmp~~~"

Объект ~~~vbmp~~~ предназначен для хранения растрового изображения
в градациях серого.
Поддерживаются форматы ~~~bmp~~~, ~~~tiff~~~, ~~~jpeg~~~
(используется динамическая библиотека ~~~limlib~~~).
Также поддерживается загрузка матрицы, сохраненной в текстовом формате
(см. ~~~matrix::save()~~~).

Объект ~~~vbmp~~~ создается вызовом функций ~~~vbmp.new()~~~, ~~~vbmp.load()~~~
и ~~~vbmp.load_matrix()~~~:

.code
  bmp = vbmp.new(w, h)                  -- создается пустое изображение
  bmp = vbmp.load('image.jpg')          -- читается изображение из файла
  bmp = vbmp.load_matrix('matrix.dat')  -- загружается матрица
..

Для класса ~~~vbmp~~~ определена метатаблица, содержащая метод ~~~__tostring()~~~.
В результате для корректно созданного объекта класса ~~~vbmp~~~ допустимо
использовать все операции, требующие приведения к типу строки (конкатенация,
печать с помощью функции print()).
При этом в строку помещается общая информация об изображении.

После создания доступны следующие методы объекта:

.defl

.def "~~~bmp:getsize()~~~"
  Возвращает высоту и ширину (именно в таком порядке) хранимого изображения.

.def "~~~bmp:save(filename)~~~"
  Сохраняет хранимое изображения в файле формата ~~~bmp~~~ с заданным именем.

.def "~~~bmp:save_matrix(filename)~~~"
  Сохраняет хранимое изображения в текстовом файле с заданным именем
  в виде матрицы (см. ~~~matrix::save()~~~).

.def "~~~bmp:get(x, y)~~~"
  Возвращает значение яркости в точке ~~~(x, y)~~~.

.def "~~~bmp:set(x, y, c)~~~"
  Присваивает пикселу с координатами ~~~(x, y)~~~ 
  заданное значение яркости ~~~c~~~.

.def "~~~bmp:matrix()~~~"
  Возвращает объект-матрицу, содержащую попиксельные яркости изображений.

.def "~~~bmp:equalize([hist_len])~~~"
  Производит выравнивание гистограммы изображения.
  При этом используется гистограмма, состоящая из ~~~hist_len~~~ элементов.
  Если значение аргумента не задано, то используется значение ~~~256~~~.
  Возвращает созданное изображение.

.def "~~~bmp:requantify(lev_num)~~~"
  Производит изменение глубины яркости изображения.
  Параметр ~~~lev_num~~~ задает желаемое число уровней квантования яркости.
  Возвращает созданное изображение.

.def "~~~bmp:decimate(dec_factor)~~~"
  Производит децимацию изображения.
  Параметр ~~~dec_factor~~~ должен быть делителем размеров исходного изображения.
  Возвращает созданное изображение размеры которого в ~~~dec_factor~~~ раз меньше исходного.

.def "~~~bmp:thresholding(threshold)~~~"
  Производит обрезание изображения по уровню.
  Уровень обрезания (вещественное число) должен лежать в пределах от ~~~0~~~ до ~~~1~~~.
  Возвращает созданное изображение.

.def "~~~bmp:sobel()~~~"
  Производит нелинейную фильтрацию по Собелу (контрастирование).
  Возвращает созданное изображение.

.def "~~~bmp:filter(cnt, cross, diag)~~~"
  Производит простую линейную фильтрацию фильтром с ИХ размером ~~~3x3~~~.
  Для ИХ задается значение ~~~cnt~~~ для центрального отсчета,
  значение ~~~cross~~~ для отсчетов, расположенных <<<по кресту>>>
  и значение ~~~diag~~~ для отсчетов, расположенных по диагонали.
  Возвращает созданное изображение.

.def "~~~bmp:stat()~~~"
  Возвращает статистику, вычисленную по изображению:
  минимальное и максимальное значения яркости,
  среднее и среднеквадратичное отклонение яркости.

.def "~~~bmp:hist([len])~~~"
  Строит гистограмму изображения с ~~~len~~~ интервалами.
  Если значение аргумента не задано, то используется значение ~~~256~~~.
  Возвращает массив (~~~array~~~) с отсчетами гистограммы.

.def "~~~bmp:crop(x0, y0, lx, ly)~~~"
  Вырезает из изображения прямоугольник с размерами ~~~(lx, ly)~~~
  и координатами ~~~(x0, y0)~~~.
  Возвращает созданное изображение.

.def "~~~bmp:hsect(y0[, ly])~~~"
  Получение горизонтального сечения изображения.
  Производится усреднение ~~~ly~~~ строк изображения начиная со строки ~~~y0~~~.
  Если параметр ~~~ly~~~ не задан, то используется умалчиваемое значение ~~~1~~~.
  Возвращает созданный вектор (~~~array~~~).

.def "~~~bmp:vsect(x0[, lx])~~~"
  Получение вертикального сечения изображения.
  Производится усреднение ~~~lx~~~ столбцов изображения начиная со столбца ~~~x0~~~.
  Если параметр ~~~lx~~~ не задан, то используется умалчиваемое значение ~~~1~~~.
  Возвращает созданный вектор (~~~array~~~).

.def "~~~bmp:gaussblur(sx, sy[, phi])~~~"
  Производит гауссово размытие изображения путем его свертки с двумерной гауссианой
  с параметрами ~~~sx, sy~~~ (сигма), повернутой на угол ~~~phi~~~.
  Возвращает размытое изображение.

.def "~~~bmp:sqgaussblur(half_sq, sigma)~~~"
  Производит размытие изображения путем его свертки с ядром в форме квадратной
  площадки с полушириной ~~~half_sq~~~ и гауссовым спадом с параметром ~~~sigma~~~.
  Возвращает размытое изображение.

.def "~~~bmp:resample(new_lx, new_ly[, r])~~~"
  Производит изменение размера изображения до заданных ~~~new_lx, new_ly~~~,
  используя ядро Ланцоша с радиусом ~~~r~~~ (характерные значения ~~~2, 3, 4~~~).
  Параметр ~~~r~~~ необязателен (умалчиваемое значение ~~~2~~~).
  Возвращает созданное изображение.

.def "~~~bmp:resize(fact)~~~"
  Производит увеличение размера изображения путем превращения каждого пиксела
  в квадрат размером ~~~fact x fact~~~.
  Возвращает созданное изображение размеры которого в ~~~fact~~~ раз больше исходного.

.def "~~~bmp:median(apt)~~~"
  Производит фильтрацию изображения медианным фильтром с апертурой радиуса ~~~apt~~~.
  Возвращает созданное изображение.
..

Дополнительно таблица ~~~vbmp~~~ содержит следующие функции:
.defl

.def "~~~vbmp.mkdiff(bmp1, bmp2)~~~"
  Создает изображение, представляющее поточечную разность изображений ~~~bmp1~~~
  и ~~~bmp2~~~. Возвращает созданное изображение.

.def "~~~vbmp.diff(bmp1, bmp2)~~~"
  Возвращает оценку различия двух изображений:
  максимальное и среднее значение для модуля разности пикселов.
..

.subs "Объект ~~~array~~~"

Объект ~~~array~~~ предназначен для хранения массивов вещественных чисел.
При использовании таких массивов вместо встроенных в ~~~lua~~~ таблиц
достигается как лучшее быстродействие, так и экономия памяти.
Также поддерживается загрузка массива, сохраненного в текстовом формате.

Объект ~~~array~~~ создается вызовом функции ~~~array.new()~~~ или ~~~array.load()~~~:
.code
  a = array.new()             -- создается пустой массив
  a = array.new(len)          -- создается массив заданной длины
  a = array.new(len, val)     -- создается массив заданной длины проинициализированный значением val
  a = array.load(filename)    -- массив загружается из файла
..

Для класса ~~~array~~~ определена метатаблица, содержащая следующие методы: 
.code
  __tostring             -- преобразование в строку
  __len                  -- применение операции '#'
  __index                -- индексирование 'a[j]' для rvalue
  __newindex             -- индексирование 'a[j]' для lvalue
..
В результате для корректно созданного объекта класса ~~~array~~~ допустимо
использовать все операции, требующие приведения к типу строки (конкатенация,
печать с помощью функции print()), а также операции индексирования и 
определения длины (операция ~~~'#'~~).
При приведении к типу строки в строку помещается общая информация о массиве.

Дополнительно таблица ~~~array~~~ содержит следующие функции:

.defl

.def "~~~array.setval(arr, val)~~~"
  Присваивает всем элементам массива значение ~~~val~~~.

.def "~~~array.resize(arr, newsize)~~~"
  Изменяет длину массива.

.def "~~~array.save(arr, filename)~~~"
  Сохраняет вектор в файле с именем ~~~filename~~~.

.def "~~~array.stat(arr)~~~"
  Возвращает статистику, вычисленную по вектору:
  минимальное, максимальное и среднее значения, среднеквадратичное отклонение.

.def "~~~array.diff(arr1, arr2)~~~"
  Возвращает оценку различия двух векторов:
  максимальное и среднее значение для модуля разности элементов.
..

.subs "Объект ~~~matrix~~~"

Объект ~~~matrix~~~ предназначен для хранения матрицы вещественных чисел.

Объект ~~~matrix~~~ создается вызовом функций ~~~matrix.new()~~~ и ~~~matrix.load()~~~:

.code
  m = matrix.new(str, col)              -- создается матрица из str строк и col столбцов
  m = matrix.new(str, col, val)         -- создается матрица из str строк и col столбцов
                                        -- и всем ее элементам присваивается значение val
  m = matrix.load('m.dat')              -- матрица читается из файла
..

Для класса ~~~matrix~~~ определена метатаблица, содержащая метод ~~~__tostring()~~~.
В результате для корректно созданного объекта класса ~~~matrix~~~ допустимо
использовать все операции, требующие приведения к типу строки (конкатенация,
печать с помощью функции print()).
При этом в строку помещается общая информация о матрице.

После создания доступны следующие методы объекта:
.defl

.def "~~~m:size()~~~"
  Возвращает количество строк и столбцов (именно в таком порядке) матрицы.

.def "~~~m:save(filename)~~~"
  Сохраняет матрицу в файле с заданным именем.

.def "~~~m:setval(val)~~~"
  Присваивает всем элементам матрицы заданное значение.

.def "~~~m:stat()~~~"
  Возвращает минмальное, максимальное и среднее значение для элементов матрицы.

.def "~~~m:get(str, col)~~~"
  Возвращает значение элемента из строки ~~~str~~~ и столбца ~~~col~~~.

.def "~~~m:set(str, col, val)~~~"
  Присваивает элементу из строки ~~~str~~~ и столбца ~~~col~~~ значение ~~~val~~~.

.def "~~~m:vbmp()~~~"
  Возвращает объект-изображение, у которого яркости точек пропорциональны значениям
  элементов матрицы.
..

Дополнительно таблица ~~~matrix~~~ содержит следующие функции:
.defl

.def "~~~matrix.diff(m1, m2)~~~"
  Возвращает оценку различия двух матриц:
  максимальное и среднее значение для модуля разности элементов.
..

.subs "Таблица ~~~fft~~~"

Эта таблица содержит функции, реализующие алгоритм быстрого преобразования Фурье.

Таблица ~~~fft~~~ содержит следующие функции:

.defl

.def "~~~fft.cfft2d(r, i)~~~"
  Вычисляет двумерное прямое дискретное преобразование Фурье для
  комплексной матрицы.
  Матрица ~~~r~~~ содержит вещественные части,
  а матрица ~~~i~~~ --- мнимые части
  элементов преобразуемой матрицы.
  Возвращает вещественную и мнимую части спектра, каждая из которых
  представлена в виде матрицы.

  Если размеры исходной матрицы не являются степенями двойки, то
  они увеличиваются до ближайшей степени двойки с заполнением
  добавляемых элементов нулями.
  Перед преобразованием выполняется процедура сдвига нуля, т.е.
  элемент, соответствующий нулевой частоте расположен в спектре
  в элементе с индексами ~~~Nx/2, Ny/2~~~, где ~~~Nx~~~, ~~~Ny~~~ ---
  размеры преобразуемой матрицы после дополнения нулями.

.def "~~~fft.cifft2d(r, i)~~~"
  Вычисляет двумерное обратное дискретное преобразование Фурье для
  комплексного спектра.
  Матрица ~~~r~~~ содержит вещественные части,
  а матрица ~~~i~~~ --- мнимые части
  элементов спектра.
  Возвращает вещественную и мнимую части изображения, каждая из которых
  представлена в виде матрицы.

  Размеры исходной матрицы должны являться степенями двойки.
  После преобразования выполняется процедура сдвига нуля, т.е.
  считается, что в исходном спектре элемент, соответствующий нулевой частоте 
  расположен в элементе с индексами ~~~Nx/2, Ny/2~~~, где ~~~Nx~~~, ~~~Ny~~~ ---
  размеры преобразуемой матрицы.

..
