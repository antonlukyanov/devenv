--[[
  Генерирование скрипта preinstall.sh, собирающего окружения времени инсталяции.

  Данный скрипт (mk_preinstall.lua) работает только в полностью установленном рабочем окружении.
  Не следует запускать этот скрипт во время инсталяцией рабочего окружения.
  Во время инсталяцией следует использовать скрипт preinstall.sh, расположенный в репозитории.
--]]

fmt = string.format
lua_path = '$TPU/lua52/src'

lua_modules = dofile('../../third-party/lua-addons/setup/lua_modules.lua') -- from here

file = assert(io.open('../build_lua.sh', 'w'))

file:write([[
#!/usr/bin/env bash
# Automatically generated by tools/mk_preinstall.lua, no hands!

echo "Patching lua..."

cd ..
TPU='third-party'
patch --output=]] .. lua_path .. [[/linit_istools.c ]] .. lua_path .. [[/linit.c \
  $TPU/lua-addons/istools/lua-istools.diff
cp $TPU/lua-addons/istools/istools.c $TPU/lua52/src
cd -

echo "Building temp/standalone-lua.exe..."

UNAME=$(uname)
TPU="../third-party"
]])

file:write('\nSRC_LIST="\\\n')
for j, fn in ipairs(lua_modules) do
  if fn ~= 'linit' then
    file:write('  ' .. lua_path .. '/' .. fn .. '.c \\\n')
  end
end
file:write('  ' .. lua_path .. '/lua.c"\n\n')

file:write([[
case $UNAME in
  MINGW*)
    g++ -O2 -Wall -DLUA_COMPAT_MODULE -otemp/standalone-lua.exe $SRC_LIST \
      ]] .. lua_path .. [[/istools.c ]] .. lua_path .. [[/linit_istools.c
    strip temp/standalone-lua.exe
  ;;
  Linux*)
    sudo apt-get install libreadline-dev
    g++ -O2 -Wall -DLUA_COMPAT_MODULE -DLUA_USE_LINUX -otemp/standalone-lua $SRC_LIST \
      ]] .. lua_path .. [[/istools.c ]] .. lua_path .. [[/linit_istools.c -ldl -lreadline
    strip temp/standalone-lua
  ;;
  Darwin*)
    brew install readline
    g++ -O2 -Wall -DLUA_COMPAT_MODULE -DLUA_USE_MACOSX -otemp/standalone-lua $SRC_LIST \
      ]] .. lua_path .. [[/istools.c ]] .. lua_path .. [[/linit_istools.c -lm -lreadline
  ;;
esac

rm ]] .. lua_path .. [[/istools.c ]] .. lua_path .. [[/linit_istools.c
]])

file:close()
